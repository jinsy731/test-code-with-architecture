package com.example.demo.mock;

import com.example.demo.post.controller.response.PostResponse;
import com.example.demo.post.domain.Post;
import com.example.demo.post.service.port.PostRepository;
import com.example.demo.user.domain.User;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakePostRepository implements PostRepository {

    // 소형 테스트는 단일 스레드에서 돌아가므로, 동기화를 고민할 필요 없음
    // 따라서, 그냥 Long, List로 선언해도 됨
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Post> data = Collections.synchronizedList(new ArrayList<>());
    @Override
    public Optional<Post> findById(long id) {
        return data.stream().filter(post -> post.getId() == id).findAny();
    }

    @Override
    public Post save(Post post) {
        if (post.getId() == null || post.getId() == 0) {
            Post savedPost = Post.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .content(post.getContent())
                    .writer(post.getWriter())
                    .createdAt(post.getCreatedAt())
                    .modifiedAt(post.getModifiedAt())
                    .build();
            data.add(savedPost);
            return savedPost;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), post.getId()));
            data.add(post);
            return post;
        }
    }
}
